// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// coef_liureg
arma::mat coef_liureg(const Rcpp::List& obj);
RcppExport SEXP _fastliu_coef_liureg(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(coef_liureg(obj));
    return rcpp_result_gen;
END_RCPP
}
// covliucpp
Rcpp::List covliucpp(const Rcpp::List& obj);
RcppExport SEXP _fastliu_covliucpp(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(covliucpp(obj));
    return rcpp_result_gen;
END_RCPP
}
// diagHcpp
arma::mat diagHcpp(const Rcpp::List& obj);
RcppExport SEXP _fastliu_diagHcpp(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(diagHcpp(obj));
    return rcpp_result_gen;
END_RCPP
}
// hatcpp
Rcpp::List hatcpp(const Rcpp::List& obj);
RcppExport SEXP _fastliu_hatcpp(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(hatcpp(obj));
    return rcpp_result_gen;
END_RCPP
}
// liuoptlamcpp
arma::vec liuoptlamcpp(const Rcpp::List& obj);
RcppExport SEXP _fastliu_liuoptlamcpp(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(liuoptlamcpp(obj));
    return rcpp_result_gen;
END_RCPP
}
// liuregcpp
Rcpp::List liuregcpp(const arma::mat& Xmat, const arma::vec& yvec, const arma::vec& lambda, std::string scale);
RcppExport SEXP _fastliu_liuregcpp(SEXP XmatSEXP, SEXP yvecSEXP, SEXP lambdaSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< std::string >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(liuregcpp(Xmat, yvec, lambda, scale));
    return rcpp_result_gen;
END_RCPP
}
// liustatscpp
arma::mat liustatscpp(const Rcpp::List& obj);
RcppExport SEXP _fastliu_liustatscpp(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(liustatscpp(obj));
    return rcpp_result_gen;
END_RCPP
}
// predict_liureg
arma::mat predict_liureg(const Rcpp::List& obj, const arma::mat& newdata);
RcppExport SEXP _fastliu_predict_liureg(SEXP objSEXP, SEXP newdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type obj(objSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type newdata(newdataSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_liureg(obj, newdata));
    return rcpp_result_gen;
END_RCPP
}
// pressliucpp
arma::vec pressliucpp(const Rcpp::List& obj);
RcppExport SEXP _fastliu_pressliucpp(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(pressliucpp(obj));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastliu_coef_liureg", (DL_FUNC) &_fastliu_coef_liureg, 1},
    {"_fastliu_covliucpp", (DL_FUNC) &_fastliu_covliucpp, 1},
    {"_fastliu_diagHcpp", (DL_FUNC) &_fastliu_diagHcpp, 1},
    {"_fastliu_hatcpp", (DL_FUNC) &_fastliu_hatcpp, 1},
    {"_fastliu_liuoptlamcpp", (DL_FUNC) &_fastliu_liuoptlamcpp, 1},
    {"_fastliu_liuregcpp", (DL_FUNC) &_fastliu_liuregcpp, 4},
    {"_fastliu_liustatscpp", (DL_FUNC) &_fastliu_liustatscpp, 1},
    {"_fastliu_predict_liureg", (DL_FUNC) &_fastliu_predict_liureg, 2},
    {"_fastliu_pressliucpp", (DL_FUNC) &_fastliu_pressliucpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastliu(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
